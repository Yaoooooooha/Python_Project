import openpyxl
import pandas as pd
import datetime as dt
import os
from time import process_time
import tkinter.messagebox as msg
import string


def open_excel(excel_name):
    return openpyxl.load_workbook(excel_name)


def save_excel(excel_name, file_name):
    file_name.save(excel_name)


# 將名字中的非中文字拿掉
def adjusted_name(strs):
    new_name = ''
    for _char in strs:
        if '\u4e00' <= _char <= '\u9fff':
            new_name += _char
    return new_name


def record_excel(a, b, sheet, names, name_online_dict):
    # 用姓名去比對
    for Index, Name in enumerate(list(sheet.columns)[2]):
        # 用ID去比對
        ID = sheet['B' + '%d' % (Index + 1)]
        # 忽略不需要的值
        if str(ID.value) == 'None' or str(ID.value) == '學號':
            continue
        if str(Name.value) == 'None' or str(Name.value) == '姓名':
            continue
        student_name = adjusted_name(str(Name.value))
        for index_n, student in enumerate(list(set(names))):
            if str(student) == 'None':
                continue

            if str(ID.value) in student:
                confirm = confirm_ID(str(ID.value), student)
                if confirm:
                    try:
                        time = name_online_dict[list(set(names))[index_n]]
                        check_record(a, b, Index, time, sheet)
                    except:
                        pass
            elif student_name in student:
                try:
                    time = name_online_dict[list(set(names))[index_n]]
                    check_record(a, b, Index, time, sheet)
                except:
                    pass


# 檢查是否要覆蓋紀錄
def check_record(a, b, Index, time, sheet):
    now_in_value = sheet[a + '%d' % (Index + 1)]
    now_out_value = sheet[a + '%d' % (Index + 1)]
    new_in_value = time[0]
    new_out_value = time[1]
    if new_in_value == None or new_out_value == None:
        return 0
    # 檢查有沒有紀錄過
    if now_in_value.value == None and now_out_value.value == None:
        sheet[a + '%d' % (Index + 1)] = new_in_value
        sheet[b + '%d' % (Index + 1)] = new_out_value
    else:
        # 檢查是否要覆蓋紀錄
        if sheet[a + '%d' % (Index + 1)].value > time[0]:
            sheet[a + '%d' % (Index + 1)] = time[0]
        if sheet[b + '%d' % (Index + 1)].value < time[1]:
            sheet[b + '%d' % (Index + 1)] = time[1]


# 搞定欄位標記
def is_record_col(record_index, column_index_dic):
    first_index = int(record_index / 26) - 1
    second_index = record_index % 26
    record_col = column_index_dic[first_index] + column_index_dic[second_index]
    return(record_col)


# 確認學號是否完全正確
def confirm_ID(ID, student):
    num_check_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    check_index = student.find(ID)
    not_end = True
    not_begin = True
    # 檢查會不會超處字串範圍
    if check_index + len(ID) == len(student):
        not_end = False
    if check_index == 0:
        not_begin = False
    # 檢查學號
    if not_end and (student[check_index + len(ID)] in num_check_list):
        return False
    elif not_begin and (student[check_index - 1] in num_check_list):
        return False
    else:
        return True


# 執行
def process():
    # 記錄程式執行時間
    start = process_time()

    # print(os.path.dirname(os.path.abspath(__file__)))

    # 創建課程資料夾
    os.chdir('/Users/yaoha0807/Desktop')
    File_Dir_Path = './Webex出席紀錄彙整'
    if not os.path.isdir(File_Dir_Path):
        os.mkdir(File_Dir_Path)
    os.chdir(File_Dir_Path)
    # 找到資料夾 把檔案全部掃一遍
    Class_File_Dir_Path = './課程資料'
    if not os.path.isdir(Class_File_Dir_Path):
        os.mkdir(Class_File_Dir_Path)
        msg.showinfo(title='資料夾已建立!', message='課程資料夾已建立於桌面，\n請在資料夾中新增課程檔案')
        os._exit(0)
    # 檢查有沒有專班課程時間檔案
    Spe_Class_File_Path = './專班上課時間表.xlsx'
    if not os.path.isfile(Spe_Class_File_Path):
        msg.showinfo(title='注意！', message='尚未加入專班上課時間表，\n如需彙整專班課程，\n請將時間表放入資料夾中')
        spe_class_file_exist = False
    else:
        spe_class_file = pd.read_excel(Spe_Class_File_Path)
        spe_class_file_exist = True

    all_file_list = os.listdir(Class_File_Dir_Path)
    # 創建彙整結果資料夾
    now_time = dt.datetime.now().strftime('%Y%m%d-%H%M%S')
    Result_Dir_Path = './' + '出席紀錄-' + now_time
    os.mkdir(Result_Dir_Path)

    # 把csv跟xlsx分別存進兩個list裡
    csv_list = []
    xlsx_list = []
    for file in all_file_list:
        if '.csv' in file:
            csv_list.append(file)
        elif '.xlsx' in file:
            xlsx_list.append(file)

    # 配對紀錄表跟點名表
    record_attendance_file = []
    for csv_file in csv_list:
        compare_list = [csv_file, '', False, '']
        start = 0
        first = csv_file.find('-')
        second = csv_file.find('-', first + 1)
        # 辨認csv為普通班或專班
        if 'ZZZ' in csv_file:
            end = csv_file.find('-', second + 1)
        else:
            third = csv_file.find('-', second + 1)
            compare_list[2] = True
            compare_list[3] = csv_file[first + 1:second]
            end = csv_file.find('-', third + 1)
        class_info = csv_file[start:end]
        # 找出檔案對應到的點名表
        for xlsx_file in xlsx_list:
            if class_info in xlsx_file:
                compare_list[1] = xlsx_file
                record_attendance_file.append(compare_list)

    attendance_file_num = 0
    date = dt.date.today()

    # 創建欄位對應字典
    alphabet = string.ascii_uppercase
    column_index_dic = dict()
    for index, letter in enumerate(alphabet):
        column_index_dic[index] = letter

    # 紀錄彙整程序開始
    for record_attendance in record_attendance_file:
        csv_file = record_attendance[0]
        xlsx_file = record_attendance[1]
        # 第n次面授
        num = xlsx_file[-7]
        # 試讀出席檔案
        print(csv_file)
        try_record_file = pd.read_csv('./課程資料/' + csv_file, encoding='utf-16', on_bad_lines='skip')
        row_index = 0
        while True:
            row = str(try_record_file.iloc[row_index])
            row_index += 1
            if '姓名' in row:
                break
        # 讀檔案
        record_file = pd.read_csv('./課程資料/' + csv_file, encoding='utf-16', header=row_index, sep='\t', usecols=['姓名', '電子郵件', '開始時間', '結束時間', '持續時間'])
        attendance_file = open_excel('./課程資料/' + xlsx_file)

        names = record_file['姓名']
        in_times = record_file['開始時間']
        out_times = record_file['結束時間']
        year = date.year
        mon = int(class_info[:2])
        day = int(class_info[2:4])

        # 統計上線時間
        name_online_dict = dict()
        for index, name in enumerate(names):
            # 忽略空值
            if str(in_times[index]) == 'nan' or str(out_times[index]) == 'nan' or in_times[index] == None or out_times[
                index] == None:
                continue
            # 區分上下午
            if ((in_times[index][:2] == '上午') or (in_times[index][3:5] == '12')) and (out_times[index][:2] != '下午' or out_times[index][3:5] == '12'):
                tmp_in = [int(t) for t in in_times[index][3:].split(':')]
                tmp_out = [int(t) for t in out_times[index][3:].split(':')]
                in_time = dt.datetime(year, mon, day, tmp_in[0], tmp_in[1])
                out_time = dt.datetime(year, mon, day, tmp_out[0], tmp_out[1])

            elif ((in_times[index][:2] == '上午') or (in_times[index][3:5] == '12')) and out_times[index][:2] == '下午' and out_times[index][3:5] != '12':
                tmp_in = [int(t) for t in in_times[index][3:].split(':')]
                tmp_out = [int(t) for t in out_times[index][3:].split(':')]
                in_time = dt.datetime(year, mon, day, tmp_in[0], tmp_in[1])
                out_time = dt.datetime(year, mon, day, tmp_out[0] + 12, tmp_out[1])

            # 避免忘記結束會議
            elif in_times[index][:2] == '下午' and out_times[index][:2] == '上午':
                tmp_in = [int(t) for t in in_times[index][3:].split(':')]
                tmp_out = [int(t) for t in out_times[index][3:].split(':')]
                in_time = dt.datetime(year, mon, day, tmp_in[0] + 12, tmp_in[1])
                out_time = dt.datetime(year, mon, day + 1, tmp_out[0], tmp_out[1])

            else:
                tmp_in = [int(t) for t in in_times[index][3:].split(':')]
                tmp_out = [int(t) for t in out_times[index][3:].split(':')]
                in_time = dt.datetime(year, mon, day, tmp_in[0]+12, tmp_in[1])
                out_time = dt.datetime(year, mon, day, tmp_out[0]+12, tmp_out[1])

            in_time, out_time = in_time.strftime('%H:%M'), out_time.strftime('%H:%M')

            if name in name_online_dict:
                in_n_out = name_online_dict[name]
                # 將分開的時段合併
                if in_time < in_n_out[0]:
                    in_n_out[0] = in_time
                if out_time > in_n_out[1]:
                    in_n_out[1] = out_time
            else:
                name_online_dict[name] = [in_time, out_time]

        # 針對專班額外進行上課時間比對
        spe_class = record_attendance[2]
        spe_name = record_attendance[3]
        if spe_class and spe_class_file_exist:
            spe_time_col = spe_class_file.columns[1]
            spe_name_col = spe_class_file.columns[2]
            # 尋找專班上課時間
            for index_spe, class_name in enumerate(spe_class_file[spe_name_col]):
                if spe_name == class_name:
                    start_end = spe_class_file[spe_time_col][index_spe].split('-')
                    class_start = dt.datetime(year, mon, day, int(start_end[0][:2]), int(start_end[0][2:])).strftime('%H:%M')
                    class_end = dt.datetime(year, mon, day, int(start_end[1][:2]), int(start_end[1][2:])).strftime('%H:%M')
                    for name in list(set(names)):
                        # 紀錄時間
                        in_time = name_online_dict[name][0]
                        out_time = name_online_dict[name][1]
                        if in_time <= class_start:
                            name_online_dict[name][0] = class_start
                        elif in_time > class_end:
                            name_online_dict[name][0] = None
                        if out_time >= class_end:
                            name_online_dict[name][1] = class_end
                        elif out_time < class_start:
                            name_online_dict[name][1] = None
                        if None in name_online_dict[name]:
                            name_online_dict[name] = [None, None]

        # 紀錄
        attendance_sheet = attendance_file['統計']
        # 依照第n次課程對應紀錄欄位 方法一
        '''
        in_time_index = 2 + 5*int(num)
        out_time_index = 3 + 5*int(num)
        '''
        # 依照第n次課程對應紀錄欄位 方法二
        tmp = list(attendance_sheet.rows)[1]
        col_head = []
        for col in tmp:
            col_head.append(col.value)
        in_time_index = 0
        for i in range(int(num)):
            in_time_index = col_head.index('進入', in_time_index + 1)
            if i == int(num) - 1:
                out_time_index = in_time_index + 1
        # 處理超過Z之欄位
        if in_time_index >= 26:
            in_time_col = is_record_col(in_time_index, column_index_dic)
        else:
            in_time_col = column_index_dic[in_time_index]
            out_time_col = column_index_dic[out_time_index]
        if out_time_index >= 26:
            out_time_col = is_record_col(out_time_index, column_index_dic)
        record_excel(in_time_col, out_time_col, attendance_sheet, names, name_online_dict)

        # 存檔
        index = xlsx_file.find('(空白)')
        new_file_name = xlsx_file[:index] + '(初篩)' + xlsx_file[index + 4:]
        save_excel(Result_Dir_Path + '/' + new_file_name, attendance_file)
        attendance_file_num += 1

    end = process_time()
    msg.showinfo(title='彙整完成!', message='已完成彙整 ' + str(attendance_file_num) + ' 份點名檔')